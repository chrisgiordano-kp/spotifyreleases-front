@import '~@angular/material/theming';
// Plus imports for other components in your app.

/* For use in src/lib/core/theming/_palette.scss */
$md-palette: (
    50 : #e3f1e7,
    100 : #baddc3,
    200 : #8cc69b,
    300 : #5eaf72,
    400 : #3c9e54,
    500 : #198d36,
    600 : #168530,
    700 : #127a29,
    800 : #0e7022,
    900 : #085d16,
    A100 : #90ff9d,
    A200 : #5dff70,
    A400 : #2aff43,
    A700 : #10ff2d,
    contrast: (
        50 : #000000,
        100 : #000000,
        200 : #000000,
        300 : #000000,
        400 : #ffffff,
        500 : #ffffff,
        600 : #ffffff,
        700 : #ffffff,
        800 : #ffffff,
        900 : #ffffff,
        A100 : #000000,
        A200 : #000000,
        A400 : #000000,
        A700 : #000000,
    )
);

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$candy-app-primary: mat-palette($md-palette);
$candy-app-accent:  mat-palette($md-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$candy-app-warn:    mat-palette($mat-red);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as `color` or `typography`.
$candy-app-theme: mat-light-theme((
  color: (
    primary: $candy-app-primary,
    accent: $candy-app-accent,
    warn: $candy-app-warn,  
  )
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($candy-app-theme);