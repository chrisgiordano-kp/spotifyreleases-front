/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.9.4.0 (NJsonSchema v10.3.1.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class ReleaseClient {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getReleases(filter: string | null | undefined, order: string | null | undefined, pageNumber: number | undefined, pageSize: number | undefined, asc: string | null | undefined): Observable<PagingResultOfReleaseDto | null> {
        let url_ = this.baseUrl + "/api/Release/releases?";
        if (filter !== undefined && filter !== null)
            url_ += "filter=" + encodeURIComponent("" + filter) + "&";
        if (order !== undefined && order !== null)
            url_ += "order=" + encodeURIComponent("" + order) + "&";
        if (pageNumber === null)
            throw new Error("The parameter 'pageNumber' cannot be null.");
        else if (pageNumber !== undefined)
            url_ += "pageNumber=" + encodeURIComponent("" + pageNumber) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "pageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (asc !== undefined && asc !== null)
            url_ += "asc=" + encodeURIComponent("" + asc) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetReleases(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetReleases(<any>response_);
                } catch (e) {
                    return <Observable<PagingResultOfReleaseDto | null>><any>_observableThrow(e);
                }
            } else
                return <Observable<PagingResultOfReleaseDto | null>><any>_observableThrow(response_);
        }));
    }

    protected processGetReleases(response: HttpResponseBase): Observable<PagingResultOfReleaseDto | null> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (<any>response).error instanceof Blob ? (<any>response).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? PagingResultOfReleaseDto.fromJS(resultData200) : <any>null;
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap(_responseText => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf<PagingResultOfReleaseDto | null>(<any>null);
    }
}

export class PagingResultOfReleaseDto implements IPagingResultOfReleaseDto {
    data?: ReleaseDto[] | undefined;
    pageNumber!: number;
    total!: number;
    pageSize!: number;

    constructor(data?: IPagingResultOfReleaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(ReleaseDto.fromJS(item));
            }
            this.pageNumber = _data["pageNumber"];
            this.total = _data["total"];
            this.pageSize = _data["pageSize"];
        }
    }

    static fromJS(data: any): PagingResultOfReleaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new PagingResultOfReleaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        data["pageNumber"] = this.pageNumber;
        data["total"] = this.total;
        data["pageSize"] = this.pageSize;
        return data; 
    }
}

export interface IPagingResultOfReleaseDto {
    data?: ReleaseDto[] | undefined;
    pageNumber: number;
    total: number;
    pageSize: number;
}

export class ReleaseDto implements IReleaseDto {
    id!: number;
    spotifyId?: string | undefined;
    name?: string | undefined;
    artistNames?: string[] | undefined;
    releaseType!: AlbumType;
    externalUrl?: string | undefined;
    image64?: string | undefined;
    image300?: string | undefined;
    image640?: string | undefined;
    releaseDate?: string | undefined;
    totalTracks!: number;
    spotifyUri?: string | undefined;

    constructor(data?: IReleaseDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.spotifyId = _data["spotifyId"];
            this.name = _data["name"];
            if (Array.isArray(_data["artistNames"])) {
                this.artistNames = [] as any;
                for (let item of _data["artistNames"])
                    this.artistNames!.push(item);
            }
            this.releaseType = _data["releaseType"];
            this.externalUrl = _data["externalUrl"];
            this.image64 = _data["image64"];
            this.image300 = _data["image300"];
            this.image640 = _data["image640"];
            this.releaseDate = _data["releaseDate"];
            this.totalTracks = _data["totalTracks"];
            this.spotifyUri = _data["spotifyUri"];
        }
    }

    static fromJS(data: any): ReleaseDto {
        data = typeof data === 'object' ? data : {};
        let result = new ReleaseDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["spotifyId"] = this.spotifyId;
        data["name"] = this.name;
        if (Array.isArray(this.artistNames)) {
            data["artistNames"] = [];
            for (let item of this.artistNames)
                data["artistNames"].push(item);
        }
        data["releaseType"] = this.releaseType;
        data["externalUrl"] = this.externalUrl;
        data["image64"] = this.image64;
        data["image300"] = this.image300;
        data["image640"] = this.image640;
        data["releaseDate"] = this.releaseDate;
        data["totalTracks"] = this.totalTracks;
        data["spotifyUri"] = this.spotifyUri;
        return data; 
    }
}

export interface IReleaseDto {
    id: number;
    spotifyId?: string | undefined;
    name?: string | undefined;
    artistNames?: string[] | undefined;
    releaseType: AlbumType;
    externalUrl?: string | undefined;
    image64?: string | undefined;
    image300?: string | undefined;
    image640?: string | undefined;
    releaseDate?: string | undefined;
    totalTracks: number;
    spotifyUri?: string | undefined;
}

export enum AlbumType {
    Single = 0,
    Album = 1,
    Compilation = 2,
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    if (result !== null && result !== undefined)
        return _observableThrow(result);
    else
        return _observableThrow(new ApiException(message, status, response, headers, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((<any>event.target).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}